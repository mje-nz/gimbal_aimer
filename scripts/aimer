#!/usr/bin/env python
# coding: utf-8
"""Single-axis gimbal aimer node.

Subscribes to a PointStamped topic, transforms the point into the gimbal's (non-rotatin) tf frame, then publishes a
JointState message (for joint_state_publisher) which aims the gimbal at the point.

An angle of zero is horizontal, positive is up, negative is down.
"""

from __future__ import print_function

import copy
import math

import rospy
from geometry_msgs.msg import Point, PointStamped
from sensor_msgs.msg import JointState
from mavros_msgs.msg import MountControl
import tf2_geometry_msgs
import tf2_ros


class AimerNode(object):

    def __init__(self):
        self.gimbal_frame = rospy.get_param('gimbal_frame', 'gimbal_link')
        self.joint_name = rospy.get_param('gimbal_joint', 'payload_joint')
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)
        self.point_listener = rospy.Subscriber('point', PointStamped, self.point_callback)

        self.min_angle = math.radians(rospy.get_param('~min_angle', -90))
        self.max_angle = math.radians(rospy.get_param('~max_angle', 90))

        self.joint_state_pub = None
        if rospy.get_param('~publish_joint_state', True):
            self.joint_state_pub = rospy.Publisher('~joint_state', JointState, queue_size=1)

        self.mount_control_pub = None
        if rospy.get_param('~control_gimbal', True):
            self.mount_control_pub = rospy.Publisher('~mount_control', MountControl, queue_size=1)
        self.last_mount_control_pub = rospy.Time()

        print('Ready')

    def _transform_point(self, point_message):
        try:
            return self.tf_buffer.transform(point_message, self.gimbal_frame, timeout=rospy.Duration(0.1)).point
        except tf2_ros.TransformException as e:
            print(e)
            return None

    def _should_control(self, transformed_point):
        """Decide whether we're close enough to start aiming."""
        p = transformed_point
        close_enough = (p.x**2 + p.y**2 + p.z**2) <= 1
        if not close_enough:
            print('Not close enough')
        in_front_of = p.x > 0
        if not in_front_of:
            print('Not in front of')
        return close_enough and in_front_of

    def point_callback(self, point_message):
        transformed_point = self._transform_point(point_message)
        if transformed_point is None:
            print('Could not transform point')
            return

        if self._should_control(transformed_point):
            angle = math.atan2(transformed_point.z, transformed_point.x)
            print('Angle:', angle)

            angle = max(min(angle, self.max_angle), self.min_angle)
        else:
            angle = 0


        if self.joint_state_pub:
            joint_state_message = JointState()
            joint_state_message.header = point_message.header
            joint_state_message.name = [self.joint_name]
            joint_state_message.position = [angle]
            self.joint_state_pub.publish(joint_state_message)

        if self.mount_control_pub and rospy.Time.now() - self.last_mount_control_pub > rospy.Duration(0.01):
            mount_control_message = MountControl()
            mount_control_message.mode = MountControl.MODE_MAVLINK_TARGETING
            mount_control_message.pitch = math.degrees(angle)
            self.mount_control_pub.publish(mount_control_message)
            self.last_mount_control_pub = rospy.Time.now()


if __name__ == '__main__':
    rospy.init_node('gimbal_aimer')
    node = AimerNode()
    rospy.spin()
    print('Exiting')
